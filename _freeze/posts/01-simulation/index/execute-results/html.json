{
  "hash": "2abd1e4b3155177745f65c5c8cd5723b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mini Project 1: Sampling Distribution of the Sample Minimum and Maximum\"\nauthor: \"Taylor Lum\"\ndate: \"2025-04-28\"\n---\n\n\n\n\n\nUsing simulation to investigate the sampling distributions for the minimum and maximum of samples taken from different populations.\n\n## Population Distributions\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n## Normal Distribution\n\n$Y \\sim N(\\mu = 10, \\sigma^2 = 4)$\n\n### Simulate the Distribution: Minimum $Y_{min}$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_samp_min_norm <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min_norm(mu = mu, sigma = sigma, n = n))\n\n## each number represents the sample mean from __one__ sample.\nnorm_mins_df <- tibble(mins)\n\nnorm_mins_plot <- ggplot(data = norm_mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = \"normal(10, 4)\")\n\nnorm_mins_summ <- norm_mins_df |>\n  summarise(mean_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n:::\n\n\n\n### Simulate the Distribution: Maximum $Y_{max}$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_samp_max_norm <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmaxes <- map_dbl(1:nsim, \\(i) generate_samp_max_norm(mu = mu, sigma = sigma, n = n))\n\n## each number represents the sample mean from __one__ sample.\nnorm_maxes_df <- tibble(maxes)\n\nnorm_maxes_plot <- ggplot(data = norm_maxes_df, aes(x = maxes)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxes\",\n       title = \"normal(10, 4)\")\n\nnorm_maxes_summ <- norm_maxes_df |>\n  summarise(mean_samp_dist = mean(maxes),\n            var_samp_dist = var(maxes),\n            sd_samp_dist = sd(maxes))\n```\n:::\n\n\n\n## Uniform Distribution\n\n$Y \\sim Unif(\\theta_{1} = 7, \\theta_{2} = 13)$\n\n### Simulate the Distribution: Minimum $Y_{min}$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\ntheta1 <- 7          \ntheta2 <- 13    \n\ngenerate_samp_min_unif <- function(theta1, theta2, n) {\n  \n  single_sample <- runif(n, theta1, theta2)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min_unif(theta1 = theta1, theta2 = theta2, n = n))\n\n## each number represents the sample mean from __one__ sample.\nunif_mins_df <- tibble(mins)\n\nunif_mins_plot <- ggplot(data = unif_mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = \"uniform(7, 13)\")\n\nunif_mins_summ <- unif_mins_df |>\n  summarise(mean_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n:::\n\n\n\n### Simulate the Distribution: Maximum $Y_{max}$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\ntheta1 <- 7         \ntheta2 <- 13        \n\ngenerate_samp_max_unif <- function(theta1, theta2, n) {\n  \n  single_sample <- runif(n, theta1, theta2)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmaxes <- map_dbl(1:nsim, \\(i) generate_samp_max_unif(theta1 = theta1, theta2 = theta2, n = n))\n\n## each number represents the sample mean from __one__ sample.\nunif_maxes_df <- tibble(maxes)\n\nunif_maxes_plot <- ggplot(data = unif_maxes_df, aes(x = maxes)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxes\",\n       title = \"uniform(7, 13)\")\n\nunif_maxes_summ <- unif_maxes_df |>\n  summarise(mean_samp_dist = mean(maxes),\n            var_samp_dist = var(maxes),\n            sd_samp_dist = sd(maxes))\n```\n:::\n\n\n\n## Exponential Distribution\n\n$Y \\sim Exp(\\lambda = 0.5)$\n\n### Simulate the Distribution: Minimum $Y_{min}$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nlambda <- 0.5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\ngenerate_samp_min_exp <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min_exp(lambda = lambda, n = n))\n\n## each number represents the sample mean from __one__ sample.\nexp_mins_df <- tibble(mins)\n\nexp_mins_plot <- ggplot(data = exp_mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = \"exp(0.5)\")\n\nexp_mins_summ <- exp_mins_df |>\n  summarise(mean_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n:::\n\n\n\n### Simulate the Distribution: Maximum $Y_{max}$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nlambda <- 0.5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\ngenerate_samp_max_exp <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmaxes <- map_dbl(1:nsim, \\(i) generate_samp_max_exp(lambda = lambda, n = n))\n\n## each number represents the sample mean from __one__ sample.\nexp_maxes_df <- tibble(maxes)\n\nexp_maxes_plot <- ggplot(data = exp_maxes_df, aes(x = maxes)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxes\",\n       title = \"exp(0.5)\")\n\nexp_maxes_summ <- exp_maxes_df |>\n  summarise(mean_samp_dist = mean(maxes),\n            var_samp_dist = var(maxes),\n            sd_samp_dist = sd(maxes))\n```\n:::\n\n\n\n## Beta Distribution\n\n$Y \\sim Beta(\\alpha = 8, \\beta = 2)$\n\n### Simulate the Distribution: Minimum $Y_{min}$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nalpha <- 8\nbeta <- 2\n\ngenerate_samp_min_beta <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min_beta(alpha = alpha, beta = beta, n = n))\n\n## each number represents the sample mean from __one__ sample.\nbeta_mins_df <- tibble(mins)\n\nbeta_mins_plot <- ggplot(data = beta_mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = \"beta(8, 2)\")\n\nbeta_mins_summ <- beta_mins_df |>\n  summarise(mean_samp_dist = mean(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n:::\n\n\n\n### Simulate the Distribution: Maximum $Y_{max}$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nalpha <- 8\nbeta <- 2\n\ngenerate_samp_max_beta <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmaxes <- map_dbl(1:nsim, \\(i) generate_samp_max_beta(alpha = alpha, beta = beta, n = n))\n\n## each number represents the sample mean from __one__ sample.\nbeta_maxes_df <- tibble(maxes)\n\nbeta_maxes_plot <- ggplot(data = beta_maxes_df, aes(x = maxes)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxes\",\n       title = \"beta(8, 2)\")\n\nbeta_maxes_summ <- beta_maxes_df |>\n  summarise(mean_samp_dist = mean(maxes),\n            var_samp_dist = var(maxes),\n            sd_samp_dist = sd(maxes))\n```\n:::\n\n\n\n## Simulated Distributions of Sample Minimums\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=768}\n:::\n:::\n\n\n\n## Simulated Distributions of Sample Maximums\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=768}\n:::\n:::\n\n\n\n## Results\n\n|   | $\\text{N}(\\mu = 10, \\sigma^2 = 4)$ | $\\text{Unif}(\\theta_1 = 7, \\theta_2 = 13)$ | $\\text{Exp}(\\lambda = 0.5)$ | $\\text{Beta}(\\alpha = 8, \\beta = 2)$ |\n|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|\n| $\\text{E}(Y_{min})$ | 7.6721479 | 7.9906366 | 0.3948871 | 0.6468993 |\n| $\\text{E}(Y_{max})$ | 12.3195106 | 12.0186568 | 4.6088644 | 0.9217724 |\n|  |  |  |  |  |\n| $\\text{SE}(Y_{min})$ | 1.2966635 | 0.8447587 | 0.3929804 | 0.105978 |\n| $\\text{SE}(Y_{max})$ | 1.3333167 | 0.8330108 | 2.4335272 | 0.0455276 |\n\n: Table of Results {.striped .hover}\n\n## Discussion\n\n### Useful Situations\n\nThe normal distribution should be used when modeling data that is approximately symmetric and fairly centered around a certain value. That is, the \"extreme\" values are approximately equally likely to occur, while lots of values cluster around an average (ex. people's heights). A uniform distribution should be used when all values in a certain range are equally likely to occur (ex. rolling a die). An exponential distribution should be used when modeling data that is essentially \"time\" between an event occurring, while the rate parameter $\\lambda$ is the average rate at which this event occurs in a given time (ex. lifetimes). Lastly, a beta distribution should be used when values fall between 0 and 1, which typically represents a percentage (ex. likelihood of 60% of people liking cilantro).\n\n### $SE(Y_{min})$ vs $SE(Y_{max})$\n\nFor the normal and uniform population models, $SE(Y_{min})$ and $SE(Y_{max})$ are extremely close. For the exponential and beta distributions, they are very different. Based on the observed values and visual representations of the population distributions, it seems that a general rule could be that $SE(Y_{min}) \\approx SE(Y_{max})$ if the population distribution is symmetrical.\n\n### PDF for the Exponential Distribution\n\n$Y \\sim Exp(\\lambda = 0.5)$\n\n#### Minimum\n\n$f(y) = \\lambda e^{-\\lambda y}$\n\n$f(y) = 0.5e^{-0.5y}$ where $y > 0$\n\nFind CDF, F(y):\n\n$F(y) = \\int_{0}^{y}0.5e^{-0.5y} dy = 1 - e^{-0.5y}$\n\nUse CDF and PDF for Y to find PDF for Minimum:\n\n$f_{min}(y_{min}) = n(1-F(y))^{n-1}f(y)$\n\n$f_{min}(y_{min}) = n(1-(1 - e^{-0.5y})^{n-1}0.5e^{-0.5y}$\n\n$f_{min}(y_{min}) = n(e^{-0.5y})^{n-1}0.5e^{-0.5y}$\n\n$f_{min}(y_{min}) = 0.5ne^{-0.5yn}$\n\nif n = 5, $f_{min}(y_{min}) = 2.5e^{-2.5y}$\n\nExpectation for Minimum:\n\n$E(Y_{min}) = \\int_{0}^{\\infty}y_{min}f_{min}(y_{min})dy_{min}$\n\n$E(Y_{min}) = \\int_{0}^{\\infty}y_{min}2.5e^{-2.5y_{min}}dy_{min}$ (use Symbolab to calculate)\n\n$E(Y_{min}) = 0.4$\n\nPDF for Minimum with Expected Value\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nSE for Minimum:\n\n$E(Y_{min}^2) = \\int_{0}^{\\infty}y_{min}^2f_{min}(y_{min})dy_{min}$\n\n$E(Y_{min}^2) = \\int_{0}^{\\infty}y_{min}^22.5e^{-2.5y_{min}}dy_{min}$\n\n$E(Y_{min}^2) = 0.32$ (use Symbolab to calculate)\n\n$Var(Y_{min}) = E(Y_{min}^2) - [E(Y_{min})]^2$\n\n$Var(Y_{min}) = 0.32 - 0.4^2$\n\n$Var(Y_{min}) = 0.16$\n\n$SE(Y_{min}) = \\sqrt{0.16} = 0.40$\n\n#### Maximum\n\nUse CDF and PDF for Y to find PDF for Maximum:\n\n$f_{max}(y_{max}) = n(F(y))^{n-1}f(y)$\n\n$f_{max}(y_{max}) = n(1 - e^{-0.5y})^{n-1}0.5e^{-0.5y}$\n\nif n = 5, $f_{max}(y_{max}) = 2.5(1 - e^{-0.5y})^{4}e^{-0.5y}$\n\nExpectation for Maximum:\n\n$E(Y_{max}) = \\int_{0}^{\\infty}y_{max}f_{max}(y_{max})dy_{max}$\n\n$E(Y_{max}) = \\int_{0}^{\\infty}y_{max}2.5(1 - e^{-0.5y_{max}})^{4}e^{-0.5y_{max}}dy_{max}$ (use Symbolab to calculate)\n\n$E(Y_{max}) = 4.567$\n\nPDF for Maximum with Expected Value\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nSE for Maximum:\n\n$E(Y_{max}^2) = \\int_{0}^{\\infty}y_{max}^2f_{max}(y_{max})dy_{max}$\n\n$E(Y_{max}^2) = \\int_{0}^{\\infty}y_{max}^22.5(1 - e^{-0.5y_{max}})^{4}e^{-0.5y_{max}}dy_{max}$ (use Symbolab to calculate)\n\n$E(Y_{max}^2) = 26.709$\n\n$Var(Y_{max}) = E(Y_{max}^2) - [E(Y_{max})]^2$\n\n$Var(Y_{max}) = 26.709 - 4.567^2$\n\n$Var(Y_{max}) = 5.85151$\n\n$SE(Y_{max}) = \\sqrt{5.85151} = 2.418989$\n\nFor both the minimum and maximum, the expected values and standard errors are very close to the results of the simulation.\n\n|                      |        $\\text{Simulation}$        | $\\text{PDF}$ |\n|:--------------------:|:---------------------------------:|:------------:|\n| $\\text{E}(Y_{min})$  | 0.3948871  |     0.4      |\n| $\\text{E}(Y_{max})$  | 4.6088644 |    4.567     |\n|                      |                                   |              |\n| $\\text{SE}(Y_{min})$ |  0.3929804   |     0.4      |\n| $\\text{SE}(Y_{max})$ |  2.4335272  |   2.418989   |\n\n: Table of Results {.striped .hover}",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}